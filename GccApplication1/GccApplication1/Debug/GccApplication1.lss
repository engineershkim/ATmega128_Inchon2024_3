
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000490  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3c  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085b  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c0  00000000  00000000  00001813  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022e  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000225b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	07 d0       	rcall	.+14     	; 0xa8 <main>
  9a:	f8 c1       	rjmp	.+1008   	; 0x48c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <checking_switch_num>:
//  SW : PG3, Input
// LED : PG4, Output

int checking_switch_num(void){
	// TODO : Error Checking num
	char c = PING | GPortL;
  9e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
		//n = SPEED_UP;
		//case SWITCH3 :
		//n = SPEED_DOWN;
	//}
	return n;
}
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	08 95       	ret

000000a8 <main>:
int main(void)
{

    /* Replace with your application code */
	// printf("Hello World");
	DDRG |=  0x10; // xxxx xxxx => xxx1 0000 : 1=출력
  a8:	e4 e6       	ldi	r30, 0x64	; 100
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	80 83       	st	Z, r24
	DDRG &= ~0x0E; // xxxx xxxx => xxxx 000x : 0=입력
  b2:	80 81       	ld	r24, Z
  b4:	81 7f       	andi	r24, 0xF1	; 241
  b6:	80 83       	st	Z, r24
	//DDG3 = 1; // bit단위의 접근, but const 때문에 입력불가..?
	
	char v = NOT_WORK;
	int n = NOT_WORK;
	int delay = 200;
  b8:	c8 ec       	ldi	r28, 0xC8	; 200
  ba:	d0 e0       	ldi	r29, 0x00	; 0
	// printf("Hello World");
	DDRG |=  0x10; // xxxx xxxx => xxx1 0000 : 1=출력
	DDRG &= ~0x0E; // xxxx xxxx => xxxx 000x : 0=입력
	//DDG3 = 1; // bit단위의 접근, but const 때문에 입력불가..?
	
	char v = NOT_WORK;
  bc:	10 e0       	ldi	r17, 0x00	; 0
	int delay = 200;
	
    while (1) 
    {		

		if(v == TOGGLE) {
  be:	11 30       	cpi	r17, 0x01	; 1
  c0:	09 f0       	breq	.+2      	; 0xc4 <main+0x1c>
  c2:	73 c0       	rjmp	.+230    	; 0x1aa <main+0x102>
			PORTG |= G5_Pin_address;
  c4:	e5 e6       	ldi	r30, 0x65	; 101
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24
			_delay_ms(delay);
  ce:	be 01       	movw	r22, r28
  d0:	0d 2e       	mov	r0, r29
  d2:	00 0c       	add	r0, r0
  d4:	88 0b       	sbc	r24, r24
  d6:	99 0b       	sbc	r25, r25
  d8:	c2 d0       	rcall	.+388    	; 0x25e <__floatsisf>
  da:	4b 01       	movw	r8, r22
  dc:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	4a e7       	ldi	r20, 0x7A	; 122
  e4:	55 e4       	ldi	r21, 0x45	; 69
  e6:	47 d1       	rcall	.+654    	; 0x376 <__mulsf3>
  e8:	6b 01       	movw	r12, r22
  ea:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e8       	ldi	r20, 0x80	; 128
  f2:	5f e3       	ldi	r21, 0x3F	; 63
  f4:	82 d0       	rcall	.+260    	; 0x1fa <__cmpsf2>
  f6:	88 23       	and	r24, r24
  f8:	04 f1       	brlt	.+64     	; 0x13a <main+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	3f ef       	ldi	r19, 0xFF	; 255
  fe:	4f e7       	ldi	r20, 0x7F	; 127
 100:	57 e4       	ldi	r21, 0x47	; 71
 102:	c7 01       	movw	r24, r14
 104:	b6 01       	movw	r22, r12
 106:	33 d1       	rcall	.+614    	; 0x36e <__gesf2>
 108:	18 16       	cp	r1, r24
 10a:	9c f4       	brge	.+38     	; 0x132 <main+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e2       	ldi	r20, 0x20	; 32
 112:	51 e4       	ldi	r21, 0x41	; 65
 114:	c5 01       	movw	r24, r10
 116:	b4 01       	movw	r22, r8
 118:	2e d1       	rcall	.+604    	; 0x376 <__mulsf3>
 11a:	73 d0       	rcall	.+230    	; 0x202 <__fixunssfsi>
 11c:	06 c0       	rjmp	.+12     	; 0x12a <main+0x82>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	80 e9       	ldi	r24, 0x90	; 144
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	61 50       	subi	r22, 0x01	; 1
 128:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12a:	61 15       	cp	r22, r1
 12c:	71 05       	cpc	r23, r1
 12e:	b9 f7       	brne	.-18     	; 0x11e <main+0x76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 130:	09 c0       	rjmp	.+18     	; 0x144 <main+0x9c>
 132:	c7 01       	movw	r24, r14
 134:	b6 01       	movw	r22, r12
 136:	65 d0       	rcall	.+202    	; 0x202 <__fixunssfsi>
 138:	02 c0       	rjmp	.+4      	; 0x13e <main+0x96>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	cb 01       	movw	r24, r22
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x98>
				
			PORTG &= ~G5_Pin_address;
 144:	e5 e6       	ldi	r30, 0x65	; 101
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8f 7e       	andi	r24, 0xEF	; 239
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 14c:	80 83       	st	Z, r24
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e8       	ldi	r20, 0x80	; 128
 154:	5f e3       	ldi	r21, 0x3F	; 63
 156:	c7 01       	movw	r24, r14
 158:	b6 01       	movw	r22, r12
 15a:	4f d0       	rcall	.+158    	; 0x1fa <__cmpsf2>
 15c:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 15e:	04 f1       	brlt	.+64     	; 0x1a0 <main+0xf8>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	3f ef       	ldi	r19, 0xFF	; 255
 164:	4f e7       	ldi	r20, 0x7F	; 127
 166:	57 e4       	ldi	r21, 0x47	; 71
 168:	c7 01       	movw	r24, r14
 16a:	b6 01       	movw	r22, r12
 16c:	00 d1       	rcall	.+512    	; 0x36e <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 16e:	18 16       	cp	r1, r24
 170:	9c f4       	brge	.+38     	; 0x198 <main+0xf0>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e2       	ldi	r20, 0x20	; 32
 178:	51 e4       	ldi	r21, 0x41	; 65
 17a:	c5 01       	movw	r24, r10
 17c:	b4 01       	movw	r22, r8
 17e:	fb d0       	rcall	.+502    	; 0x376 <__mulsf3>
 180:	40 d0       	rcall	.+128    	; 0x202 <__fixunssfsi>
 182:	06 c0       	rjmp	.+12     	; 0x190 <main+0xe8>
 184:	80 e9       	ldi	r24, 0x90	; 144
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xe0>
 18c:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18e:	71 09       	sbc	r23, r1
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 194:	b9 f7       	brne	.-18     	; 0x184 <main+0xdc>
 196:	09 c0       	rjmp	.+18     	; 0x1aa <main+0x102>
 198:	c7 01       	movw	r24, r14
 19a:	b6 01       	movw	r22, r12
 19c:	32 d0       	rcall	.+100    	; 0x202 <__fixunssfsi>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <main+0xfc>
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	cb 01       	movw	r24, r22
 1a6:	01 97       	sbiw	r24, 0x01	; 1
			_delay_ms(delay);
		}
		n = checking_switch_num();
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0xfe>
 1aa:	79 df       	rcall	.-270    	; 0x9e <checking_switch_num>

		if(n == TOGGLE){
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	d1 f4       	brne	.+52     	; 0x1e6 <main+0x13e>
			if(v == NOT_WORK) {v = TOGGLE;   _delay_ms(200);}
 1b2:	11 23       	and	r17, r17
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <main+0x120>
 1b6:	80 ed       	ldi	r24, 0xD0	; 208
 1b8:	97 e0       	ldi	r25, 0x07	; 7
 1ba:	11 c0       	rjmp	.+34     	; 0x1de <main+0x136>
 1bc:	e0 e9       	ldi	r30, 0x90	; 144
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x118>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <main+0x124>
 1c8:	80 ed       	ldi	r24, 0xD0	; 208
 1ca:	97 e0       	ldi	r25, 0x07	; 7
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	b1 f7       	brne	.-20     	; 0x1bc <main+0x114>
 1d0:	11 e0       	ldi	r17, 0x01	; 1
 1d2:	75 cf       	rjmp	.-278    	; 0xbe <main+0x16>
 1d4:	e0 e9       	ldi	r30, 0x90	; 144
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x130>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1de:	00 97       	sbiw	r24, 0x00	; 0
 1e0:	c9 f7       	brne	.-14     	; 0x1d4 <main+0x12c>
			else			  {v = NOT_WORK; _delay_ms(200);}
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	6c cf       	rjmp	.-296    	; 0xbe <main+0x16>
		}
		else if ( n == SPEED_UP ){
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	91 05       	cpc	r25, r1
 1ea:	11 f4       	brne	.+4      	; 0x1f0 <main+0x148>
			delay -= 10;
 1ec:	2a 97       	sbiw	r28, 0x0a	; 10
 1ee:	67 cf       	rjmp	.-306    	; 0xbe <main+0x16>
		}
		else if ( n == SPEED_DOWN ){
 1f0:	03 97       	sbiw	r24, 0x03	; 3
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <main+0x14e>
 1f4:	64 cf       	rjmp	.-312    	; 0xbe <main+0x16>
			delay += 10;
 1f6:	2a 96       	adiw	r28, 0x0a	; 10
 1f8:	62 cf       	rjmp	.-316    	; 0xbe <main+0x16>

000001fa <__cmpsf2>:
 1fa:	6c d0       	rcall	.+216    	; 0x2d4 <__fp_cmp>
 1fc:	08 f4       	brcc	.+2      	; 0x200 <__cmpsf2+0x6>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	08 95       	ret

00000202 <__fixunssfsi>:
 202:	94 d0       	rcall	.+296    	; 0x32c <__fp_splitA>
 204:	88 f0       	brcs	.+34     	; 0x228 <__fixunssfsi+0x26>
 206:	9f 57       	subi	r25, 0x7F	; 127
 208:	90 f0       	brcs	.+36     	; 0x22e <__fixunssfsi+0x2c>
 20a:	b9 2f       	mov	r27, r25
 20c:	99 27       	eor	r25, r25
 20e:	b7 51       	subi	r27, 0x17	; 23
 210:	a0 f0       	brcs	.+40     	; 0x23a <__fixunssfsi+0x38>
 212:	d1 f0       	breq	.+52     	; 0x248 <__fixunssfsi+0x46>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	88 1f       	adc	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	1a f0       	brmi	.+6      	; 0x224 <__fixunssfsi+0x22>
 21e:	ba 95       	dec	r27
 220:	c9 f7       	brne	.-14     	; 0x214 <__fixunssfsi+0x12>
 222:	12 c0       	rjmp	.+36     	; 0x248 <__fixunssfsi+0x46>
 224:	b1 30       	cpi	r27, 0x01	; 1
 226:	81 f0       	breq	.+32     	; 0x248 <__fixunssfsi+0x46>
 228:	9b d0       	rcall	.+310    	; 0x360 <__fp_zero>
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	08 95       	ret
 22e:	98 c0       	rjmp	.+304    	; 0x360 <__fp_zero>
 230:	67 2f       	mov	r22, r23
 232:	78 2f       	mov	r23, r24
 234:	88 27       	eor	r24, r24
 236:	b8 5f       	subi	r27, 0xF8	; 248
 238:	39 f0       	breq	.+14     	; 0x248 <__fixunssfsi+0x46>
 23a:	b9 3f       	cpi	r27, 0xF9	; 249
 23c:	cc f3       	brlt	.-14     	; 0x230 <__fixunssfsi+0x2e>
 23e:	86 95       	lsr	r24
 240:	77 95       	ror	r23
 242:	67 95       	ror	r22
 244:	b3 95       	inc	r27
 246:	d9 f7       	brne	.-10     	; 0x23e <__fixunssfsi+0x3c>
 248:	3e f4       	brtc	.+14     	; 0x258 <__fixunssfsi+0x56>
 24a:	90 95       	com	r25
 24c:	80 95       	com	r24
 24e:	70 95       	com	r23
 250:	61 95       	neg	r22
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	8f 4f       	sbci	r24, 0xFF	; 255
 256:	9f 4f       	sbci	r25, 0xFF	; 255
 258:	08 95       	ret

0000025a <__floatunsisf>:
 25a:	e8 94       	clt
 25c:	09 c0       	rjmp	.+18     	; 0x270 <__floatsisf+0x12>

0000025e <__floatsisf>:
 25e:	97 fb       	bst	r25, 7
 260:	3e f4       	brtc	.+14     	; 0x270 <__floatsisf+0x12>
 262:	90 95       	com	r25
 264:	80 95       	com	r24
 266:	70 95       	com	r23
 268:	61 95       	neg	r22
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	8f 4f       	sbci	r24, 0xFF	; 255
 26e:	9f 4f       	sbci	r25, 0xFF	; 255
 270:	99 23       	and	r25, r25
 272:	a9 f0       	breq	.+42     	; 0x29e <__floatsisf+0x40>
 274:	f9 2f       	mov	r31, r25
 276:	96 e9       	ldi	r25, 0x96	; 150
 278:	bb 27       	eor	r27, r27
 27a:	93 95       	inc	r25
 27c:	f6 95       	lsr	r31
 27e:	87 95       	ror	r24
 280:	77 95       	ror	r23
 282:	67 95       	ror	r22
 284:	b7 95       	ror	r27
 286:	f1 11       	cpse	r31, r1
 288:	f8 cf       	rjmp	.-16     	; 0x27a <__floatsisf+0x1c>
 28a:	fa f4       	brpl	.+62     	; 0x2ca <__floatsisf+0x6c>
 28c:	bb 0f       	add	r27, r27
 28e:	11 f4       	brne	.+4      	; 0x294 <__floatsisf+0x36>
 290:	60 ff       	sbrs	r22, 0
 292:	1b c0       	rjmp	.+54     	; 0x2ca <__floatsisf+0x6c>
 294:	6f 5f       	subi	r22, 0xFF	; 255
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	8f 4f       	sbci	r24, 0xFF	; 255
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	16 c0       	rjmp	.+44     	; 0x2ca <__floatsisf+0x6c>
 29e:	88 23       	and	r24, r24
 2a0:	11 f0       	breq	.+4      	; 0x2a6 <__floatsisf+0x48>
 2a2:	96 e9       	ldi	r25, 0x96	; 150
 2a4:	11 c0       	rjmp	.+34     	; 0x2c8 <__floatsisf+0x6a>
 2a6:	77 23       	and	r23, r23
 2a8:	21 f0       	breq	.+8      	; 0x2b2 <__floatsisf+0x54>
 2aa:	9e e8       	ldi	r25, 0x8E	; 142
 2ac:	87 2f       	mov	r24, r23
 2ae:	76 2f       	mov	r23, r22
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <__floatsisf+0x5e>
 2b2:	66 23       	and	r22, r22
 2b4:	71 f0       	breq	.+28     	; 0x2d2 <__floatsisf+0x74>
 2b6:	96 e8       	ldi	r25, 0x86	; 134
 2b8:	86 2f       	mov	r24, r22
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	2a f0       	brmi	.+10     	; 0x2ca <__floatsisf+0x6c>
 2c0:	9a 95       	dec	r25
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	88 1f       	adc	r24, r24
 2c8:	da f7       	brpl	.-10     	; 0x2c0 <__floatsisf+0x62>
 2ca:	88 0f       	add	r24, r24
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	97 f9       	bld	r25, 7
 2d2:	08 95       	ret

000002d4 <__fp_cmp>:
 2d4:	99 0f       	add	r25, r25
 2d6:	00 08       	sbc	r0, r0
 2d8:	55 0f       	add	r21, r21
 2da:	aa 0b       	sbc	r26, r26
 2dc:	e0 e8       	ldi	r30, 0x80	; 128
 2de:	fe ef       	ldi	r31, 0xFE	; 254
 2e0:	16 16       	cp	r1, r22
 2e2:	17 06       	cpc	r1, r23
 2e4:	e8 07       	cpc	r30, r24
 2e6:	f9 07       	cpc	r31, r25
 2e8:	c0 f0       	brcs	.+48     	; 0x31a <__fp_cmp+0x46>
 2ea:	12 16       	cp	r1, r18
 2ec:	13 06       	cpc	r1, r19
 2ee:	e4 07       	cpc	r30, r20
 2f0:	f5 07       	cpc	r31, r21
 2f2:	98 f0       	brcs	.+38     	; 0x31a <__fp_cmp+0x46>
 2f4:	62 1b       	sub	r22, r18
 2f6:	73 0b       	sbc	r23, r19
 2f8:	84 0b       	sbc	r24, r20
 2fa:	95 0b       	sbc	r25, r21
 2fc:	39 f4       	brne	.+14     	; 0x30c <__fp_cmp+0x38>
 2fe:	0a 26       	eor	r0, r26
 300:	61 f0       	breq	.+24     	; 0x31a <__fp_cmp+0x46>
 302:	23 2b       	or	r18, r19
 304:	24 2b       	or	r18, r20
 306:	25 2b       	or	r18, r21
 308:	21 f4       	brne	.+8      	; 0x312 <__fp_cmp+0x3e>
 30a:	08 95       	ret
 30c:	0a 26       	eor	r0, r26
 30e:	09 f4       	brne	.+2      	; 0x312 <__fp_cmp+0x3e>
 310:	a1 40       	sbci	r26, 0x01	; 1
 312:	a6 95       	lsr	r26
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	81 1d       	adc	r24, r1
 318:	81 1d       	adc	r24, r1
 31a:	08 95       	ret

0000031c <__fp_split3>:
 31c:	57 fd       	sbrc	r21, 7
 31e:	90 58       	subi	r25, 0x80	; 128
 320:	44 0f       	add	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	59 f0       	breq	.+22     	; 0x33c <__fp_splitA+0x10>
 326:	5f 3f       	cpi	r21, 0xFF	; 255
 328:	71 f0       	breq	.+28     	; 0x346 <__fp_splitA+0x1a>
 32a:	47 95       	ror	r20

0000032c <__fp_splitA>:
 32c:	88 0f       	add	r24, r24
 32e:	97 fb       	bst	r25, 7
 330:	99 1f       	adc	r25, r25
 332:	61 f0       	breq	.+24     	; 0x34c <__fp_splitA+0x20>
 334:	9f 3f       	cpi	r25, 0xFF	; 255
 336:	79 f0       	breq	.+30     	; 0x356 <__fp_splitA+0x2a>
 338:	87 95       	ror	r24
 33a:	08 95       	ret
 33c:	12 16       	cp	r1, r18
 33e:	13 06       	cpc	r1, r19
 340:	14 06       	cpc	r1, r20
 342:	55 1f       	adc	r21, r21
 344:	f2 cf       	rjmp	.-28     	; 0x32a <__fp_split3+0xe>
 346:	46 95       	lsr	r20
 348:	f1 df       	rcall	.-30     	; 0x32c <__fp_splitA>
 34a:	08 c0       	rjmp	.+16     	; 0x35c <__fp_splitA+0x30>
 34c:	16 16       	cp	r1, r22
 34e:	17 06       	cpc	r1, r23
 350:	18 06       	cpc	r1, r24
 352:	99 1f       	adc	r25, r25
 354:	f1 cf       	rjmp	.-30     	; 0x338 <__fp_splitA+0xc>
 356:	86 95       	lsr	r24
 358:	71 05       	cpc	r23, r1
 35a:	61 05       	cpc	r22, r1
 35c:	08 94       	sec
 35e:	08 95       	ret

00000360 <__fp_zero>:
 360:	e8 94       	clt

00000362 <__fp_szero>:
 362:	bb 27       	eor	r27, r27
 364:	66 27       	eor	r22, r22
 366:	77 27       	eor	r23, r23
 368:	cb 01       	movw	r24, r22
 36a:	97 f9       	bld	r25, 7
 36c:	08 95       	ret

0000036e <__gesf2>:
 36e:	b2 df       	rcall	.-156    	; 0x2d4 <__fp_cmp>
 370:	08 f4       	brcc	.+2      	; 0x374 <__gesf2+0x6>
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	08 95       	ret

00000376 <__mulsf3>:
 376:	0b d0       	rcall	.+22     	; 0x38e <__mulsf3x>
 378:	78 c0       	rjmp	.+240    	; 0x46a <__fp_round>
 37a:	69 d0       	rcall	.+210    	; 0x44e <__fp_pscA>
 37c:	28 f0       	brcs	.+10     	; 0x388 <__mulsf3+0x12>
 37e:	6e d0       	rcall	.+220    	; 0x45c <__fp_pscB>
 380:	18 f0       	brcs	.+6      	; 0x388 <__mulsf3+0x12>
 382:	95 23       	and	r25, r21
 384:	09 f0       	breq	.+2      	; 0x388 <__mulsf3+0x12>
 386:	5a c0       	rjmp	.+180    	; 0x43c <__fp_inf>
 388:	5f c0       	rjmp	.+190    	; 0x448 <__fp_nan>
 38a:	11 24       	eor	r1, r1
 38c:	ea cf       	rjmp	.-44     	; 0x362 <__fp_szero>

0000038e <__mulsf3x>:
 38e:	c6 df       	rcall	.-116    	; 0x31c <__fp_split3>
 390:	a0 f3       	brcs	.-24     	; 0x37a <__mulsf3+0x4>

00000392 <__mulsf3_pse>:
 392:	95 9f       	mul	r25, r21
 394:	d1 f3       	breq	.-12     	; 0x38a <__mulsf3+0x14>
 396:	95 0f       	add	r25, r21
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	55 1f       	adc	r21, r21
 39c:	62 9f       	mul	r22, r18
 39e:	f0 01       	movw	r30, r0
 3a0:	72 9f       	mul	r23, r18
 3a2:	bb 27       	eor	r27, r27
 3a4:	f0 0d       	add	r31, r0
 3a6:	b1 1d       	adc	r27, r1
 3a8:	63 9f       	mul	r22, r19
 3aa:	aa 27       	eor	r26, r26
 3ac:	f0 0d       	add	r31, r0
 3ae:	b1 1d       	adc	r27, r1
 3b0:	aa 1f       	adc	r26, r26
 3b2:	64 9f       	mul	r22, r20
 3b4:	66 27       	eor	r22, r22
 3b6:	b0 0d       	add	r27, r0
 3b8:	a1 1d       	adc	r26, r1
 3ba:	66 1f       	adc	r22, r22
 3bc:	82 9f       	mul	r24, r18
 3be:	22 27       	eor	r18, r18
 3c0:	b0 0d       	add	r27, r0
 3c2:	a1 1d       	adc	r26, r1
 3c4:	62 1f       	adc	r22, r18
 3c6:	73 9f       	mul	r23, r19
 3c8:	b0 0d       	add	r27, r0
 3ca:	a1 1d       	adc	r26, r1
 3cc:	62 1f       	adc	r22, r18
 3ce:	83 9f       	mul	r24, r19
 3d0:	a0 0d       	add	r26, r0
 3d2:	61 1d       	adc	r22, r1
 3d4:	22 1f       	adc	r18, r18
 3d6:	74 9f       	mul	r23, r20
 3d8:	33 27       	eor	r19, r19
 3da:	a0 0d       	add	r26, r0
 3dc:	61 1d       	adc	r22, r1
 3de:	23 1f       	adc	r18, r19
 3e0:	84 9f       	mul	r24, r20
 3e2:	60 0d       	add	r22, r0
 3e4:	21 1d       	adc	r18, r1
 3e6:	82 2f       	mov	r24, r18
 3e8:	76 2f       	mov	r23, r22
 3ea:	6a 2f       	mov	r22, r26
 3ec:	11 24       	eor	r1, r1
 3ee:	9f 57       	subi	r25, 0x7F	; 127
 3f0:	50 40       	sbci	r21, 0x00	; 0
 3f2:	8a f0       	brmi	.+34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f4:	e1 f0       	breq	.+56     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f6:	88 23       	and	r24, r24
 3f8:	4a f0       	brmi	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	bb 1f       	adc	r27, r27
 400:	66 1f       	adc	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	88 1f       	adc	r24, r24
 406:	91 50       	subi	r25, 0x01	; 1
 408:	50 40       	sbci	r21, 0x00	; 0
 40a:	a9 f7       	brne	.-22     	; 0x3f6 <__mulsf3_pse+0x64>
 40c:	9e 3f       	cpi	r25, 0xFE	; 254
 40e:	51 05       	cpc	r21, r1
 410:	70 f0       	brcs	.+28     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 412:	14 c0       	rjmp	.+40     	; 0x43c <__fp_inf>
 414:	a6 cf       	rjmp	.-180    	; 0x362 <__fp_szero>
 416:	5f 3f       	cpi	r21, 0xFF	; 255
 418:	ec f3       	brlt	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41a:	98 3e       	cpi	r25, 0xE8	; 232
 41c:	dc f3       	brlt	.-10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41e:	86 95       	lsr	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b7 95       	ror	r27
 426:	f7 95       	ror	r31
 428:	e7 95       	ror	r30
 42a:	9f 5f       	subi	r25, 0xFF	; 255
 42c:	c1 f7       	brne	.-16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 42e:	fe 2b       	or	r31, r30
 430:	88 0f       	add	r24, r24
 432:	91 1d       	adc	r25, r1
 434:	96 95       	lsr	r25
 436:	87 95       	ror	r24
 438:	97 f9       	bld	r25, 7
 43a:	08 95       	ret

0000043c <__fp_inf>:
 43c:	97 f9       	bld	r25, 7
 43e:	9f 67       	ori	r25, 0x7F	; 127
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	08 95       	ret

00000448 <__fp_nan>:
 448:	9f ef       	ldi	r25, 0xFF	; 255
 44a:	80 ec       	ldi	r24, 0xC0	; 192
 44c:	08 95       	ret

0000044e <__fp_pscA>:
 44e:	00 24       	eor	r0, r0
 450:	0a 94       	dec	r0
 452:	16 16       	cp	r1, r22
 454:	17 06       	cpc	r1, r23
 456:	18 06       	cpc	r1, r24
 458:	09 06       	cpc	r0, r25
 45a:	08 95       	ret

0000045c <__fp_pscB>:
 45c:	00 24       	eor	r0, r0
 45e:	0a 94       	dec	r0
 460:	12 16       	cp	r1, r18
 462:	13 06       	cpc	r1, r19
 464:	14 06       	cpc	r1, r20
 466:	05 06       	cpc	r0, r21
 468:	08 95       	ret

0000046a <__fp_round>:
 46a:	09 2e       	mov	r0, r25
 46c:	03 94       	inc	r0
 46e:	00 0c       	add	r0, r0
 470:	11 f4       	brne	.+4      	; 0x476 <__fp_round+0xc>
 472:	88 23       	and	r24, r24
 474:	52 f0       	brmi	.+20     	; 0x48a <__fp_round+0x20>
 476:	bb 0f       	add	r27, r27
 478:	40 f4       	brcc	.+16     	; 0x48a <__fp_round+0x20>
 47a:	bf 2b       	or	r27, r31
 47c:	11 f4       	brne	.+4      	; 0x482 <__fp_round+0x18>
 47e:	60 ff       	sbrs	r22, 0
 480:	04 c0       	rjmp	.+8      	; 0x48a <__fp_round+0x20>
 482:	6f 5f       	subi	r22, 0xFF	; 255
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
