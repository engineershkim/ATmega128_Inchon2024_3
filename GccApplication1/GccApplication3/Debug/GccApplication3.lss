
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d5  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000823  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b3  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	65 d0       	rcall	.+202    	; 0x174 <main>
  aa:	79 c0       	rjmp	.+242    	; 0x19e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
#define LED PORTG1


int cnt = 0, st = 0;
ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	cnt++;
  c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cnt>
  c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cnt+0x1>
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cnt+0x1>
  d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cnt>
	
	if(cnt > 10)
  d6:	0b 97       	sbiw	r24, 0x0b	; 11
  d8:	fc f0       	brlt	.+62     	; 0x118 <__vector_16+0x6a>
	{
		
		cnt = 0;
  da:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <cnt+0x1>
  de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <cnt>
		if(st){
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	89 2b       	or	r24, r25
  ec:	51 f0       	breq	.+20     	; 0x102 <__vector_16+0x54>
				PORTG &= ~_BV(LED); st = 0;
  ee:	e5 e6       	ldi	r30, 0x65	; 101
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8d 7f       	andi	r24, 0xFD	; 253
  f6:	80 83       	st	Z, r24
  f8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	0b c0       	rjmp	.+22     	; 0x118 <__vector_16+0x6a>
		}
		else{
				PORTG |= _BV(LED); st = 1;
 102:	e5 e6       	ldi	r30, 0x65	; 101
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	
	}
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0b be       	out	0x3b, r0	; 59
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <TestBit>:

int TestBit(char *pin, char mask) // PINx 레지스터의 값의 mask bit가 0인지 1인지 판별
{
	if((*pin & mask) != 0) return 1;
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	68 23       	and	r22, r24
 134:	19 f0       	breq	.+6      	; 0x13c <TestBit+0xe>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret
	return 0;
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
}
 140:	08 95       	ret

00000142 <StandBy>:


void StandBy(){
	DDR &= ~0x10; // PG4 : 입력으로 설정
 142:	e4 e6       	ldi	r30, 0x64	; 100
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	80 83       	st	Z, r24
	PORT |= 0x10; // PG4 : Pull-up
 14c:	e5 e6       	ldi	r30, 0x65	; 101
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 61       	ori	r24, 0x10	; 16
 154:	80 83       	st	Z, r24

	//while((PING & (1<<SW1)) == 0); // PING0의 초기값이 1(open)임을 가정 //  전원이 켜지고 활성화 될때(pull-up (1))이 될떄까지 대기
	while(1)
	{
		if(TestBit(PING, 0x10)) break;
 156:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 15a:	60 e1       	ldi	r22, 0x10	; 16
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	e7 df       	rcall	.-50     	; 0x12e <TestBit>
 160:	89 2b       	or	r24, r25
 162:	c9 f3       	breq	.-14     	; 0x156 <StandBy+0x14>
	}
	while(1)
	{
		if(!TestBit(PING, 0x10)) break;
 164:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 168:	60 e1       	ldi	r22, 0x10	; 16
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	e0 df       	rcall	.-64     	; 0x12e <TestBit>
 16e:	89 2b       	or	r24, r25
 170:	c9 f7       	brne	.-14     	; 0x164 <StandBy+0x22>
	}
	
}
 172:	08 95       	ret

00000174 <main>:


int main(void)
{
	DDR |= _BV(LED);
 174:	e4 e6       	ldi	r30, 0x64	; 100
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	80 83       	st	Z, r24
	PORT |= _BV(LED);
 17e:	c5 e6       	ldi	r28, 0x65	; 101
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	88 81       	ld	r24, Y
 184:	82 60       	ori	r24, 0x02	; 2
 186:	88 83       	st	Y, r24
	StandBy();
 188:	dc df       	rcall	.-72     	; 0x142 <StandBy>
	PORT &= ~_BV(LED);
 18a:	88 81       	ld	r24, Y
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	88 83       	st	Y, r24
	
	TIMSK |= 0x01; // TOIE0
 190:	87 b7       	in	r24, 0x37	; 55
 192:	81 60       	ori	r24, 0x01	; 1
 194:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x07; //  분주비 1024
 196:	83 b7       	in	r24, 0x33	; 51
 198:	87 60       	ori	r24, 0x07	; 7
 19a:	83 bf       	out	0x33, r24	; 51
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x28>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
