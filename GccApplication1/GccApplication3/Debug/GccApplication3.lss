
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  000003b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0c  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000895  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040c  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d5  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000224f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	0e c1       	rjmp	.+540    	; 0x222 <__vector_1>
   6:	00 00       	nop
   8:	23 c1       	rjmp	.+582    	; 0x250 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	99 c0       	rjmp	.+306    	; 0x170 <__vector_15>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e6 d0       	rcall	.+460    	; 0x290 <main>
  c4:	2b c1       	rjmp	.+598    	; 0x31c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
#define LED1 PORTG1
#define LED2 PORTG2

int cnt = 0, cnt1 = 0, cntEx = 5, st = 0; // 초기값 : 500ms
ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	cnt++;
  e2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cnt>
  e6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cnt+0x1>
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cnt+0x1>
  f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <cnt>
	
	if(cnt > 25) // (1/16M) * 256 * 256 * 25 = 0.192 sec == 100ms
  f4:	4a 97       	sbiw	r24, 0x1a	; 26
  f6:	7c f1       	brlt	.+94     	; 0x156 <__vector_16+0x8e>
	{
		
		cnt = 0;
  f8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt+0x1>
  fc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cnt>
		cnt1++;
 100:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt1>
 104:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt1+0x1>
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt1+0x1>
 10e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt1>
		
		if(cnt1 > cntEx){
 112:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <cntEx>
 116:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <cntEx+0x1>
 11a:	28 17       	cp	r18, r24
 11c:	39 07       	cpc	r19, r25
 11e:	dc f4       	brge	.+54     	; 0x156 <__vector_16+0x8e>
			if(st){ PORTG &= ~_BV(LED0); st = 0; }
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <st>
 124:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <st+0x1>
 128:	89 2b       	or	r24, r25
 12a:	51 f0       	breq	.+20     	; 0x140 <__vector_16+0x78>
 12c:	e5 e6       	ldi	r30, 0x65	; 101
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	80 83       	st	Z, r24
 136:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <st+0x1>
 13a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <st>
 13e:	0b c0       	rjmp	.+22     	; 0x156 <__vector_16+0x8e>
			else{ PORTG |= _BV(LED0); st = 1; }
 140:	e5 e6       	ldi	r30, 0x65	; 101
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <st+0x1>
 152:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <st>
		}
	}
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_15>:

int ocnt = 0, ocnt1 = 0, ocntEx = 5, ost = 0; // 초기값 : 500ms
ISR(TIMER0_COMP_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
	ocnt++;
 18a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ocnt>
 18e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ocnt+0x1>
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ocnt+0x1>
 198:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ocnt>
	
	if(cnt > 25) // (1/16M) * 256 * 256 * 25 = 0.192 sec == 100ms
 19c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cnt>
 1a0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cnt+0x1>
 1a4:	4a 97       	sbiw	r24, 0x1a	; 26
 1a6:	84 f1       	brlt	.+96     	; 0x208 <__vector_15+0x98>
	{
		
		ocnt = 0;
 1a8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ocnt+0x1>
 1ac:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ocnt>
		ocnt1++;
 1b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ocnt1>
 1b4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ocnt1+0x1>
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ocnt1+0x1>
 1be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ocnt1>
		
		if(ocnt1 > ocntEx){
 1c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	28 17       	cp	r18, r24
 1cc:	39 07       	cpc	r19, r25
 1ce:	e4 f4       	brge	.+56     	; 0x208 <__vector_15+0x98>
			if(ost){ PORTG &= ~_BV(LED1); ost = 0; }
 1d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1d8:	89 2b       	or	r24, r25
 1da:	51 f0       	breq	.+20     	; 0x1f0 <__vector_15+0x80>
 1dc:	e5 e6       	ldi	r30, 0x65	; 101
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8d 7f       	andi	r24, 0xFD	; 253
 1e4:	80 83       	st	Z, r24
 1e6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 1ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <__vector_15+0x96>
			else{ PORTG |= _BV(LED2); ost = 1; }
 1f0:	e5 e6       	ldi	r30, 0x65	; 101
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	80 83       	st	Z, r24
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 202:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			TCNT0 = 0;
 206:	12 be       	out	0x32, r1	; 50
		}
	}
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0b be       	out	0x3b, r0	; 59
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_1>:

ISR(INT0_vect) // slower
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
	cntEx++;
 230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cntEx>
 234:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cntEx+0x1>
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cntEx+0x1>
 23e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cntEx>
}
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_2>:
ISR(INT1_vect) // faster
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
	cntEx--;
 25e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cntEx>
 262:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cntEx+0x1>
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cntEx+0x1>
 26c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cntEx>
	if(cntEx <1 ) cntEx =1;
 270:	18 16       	cp	r1, r24
 272:	19 06       	cpc	r1, r25
 274:	34 f0       	brlt	.+12     	; 0x282 <__vector_2+0x32>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cntEx+0x1>
 27e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cntEx>
}
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <main>:


int main(void)
{
	DDR |= _BV(LED0) | _BV(LED1) | _BV(LED2);
 290:	e4 e6       	ldi	r30, 0x64	; 100
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	87 60       	ori	r24, 0x07	; 7
 298:	80 83       	st	Z, r24
	PORT |= _BV(LED0);
 29a:	c5 e6       	ldi	r28, 0x65	; 101
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	88 81       	ld	r24, Y
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	88 83       	st	Y, r24
	StandBy();
 2a4:	22 d0       	rcall	.+68     	; 0x2ea <StandBy>
	PORT &= ~_BV(LED0);
 2a6:	88 81       	ld	r24, Y
 2a8:	8e 7f       	andi	r24, 0xFE	; 254
 2aa:	88 83       	st	Y, r24
	// Timer Interrupt 0 설정
	TIMSK |= 0x01;
 2ac:	87 b7       	in	r24, 0x37	; 55
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x06; //  110 : 256, 111 : 1024 분주비 1024
 2b2:	83 b7       	in	r24, 0x33	; 51
 2b4:	86 60       	ori	r24, 0x06	; 6
 2b6:	83 bf       	out	0x33, r24	; 51
	// Timer Interrupt 1 설정
	//TIMSK |= 0x02; // TOIE2
	//TCCR0 |= 0x06; //  110 : 256, 111 : 1024 분주비 1024
	
	OCR0 = 128;
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	81 bf       	out	0x31, r24	; 49
	TIMSK |= 0x02; // OCIE0
 2bc:	87 b7       	in	r24, 0x37	; 55
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	87 bf       	out	0x37, r24	; 55
	//External Interrupt 설정
	EIMSK |= 0x03;
 2c2:	89 b7       	in	r24, 0x39	; 57
 2c4:	83 60       	ori	r24, 0x03	; 3
 2c6:	89 bf       	out	0x39, r24	; 57
	EICRA |= 0x0F;
 2c8:	ea e6       	ldi	r30, 0x6A	; 106
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	8f 60       	ori	r24, 0x0F	; 15
 2d0:	80 83       	st	Z, r24
	sei();
 2d2:	78 94       	sei
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <main+0x44>

000002d6 <TestBit>:
#define LED1 PORTG1
#define LED2 PORTG2

int TestBit(char *pin, char mask) // PINx 레지스터의 값의 mask bit가 0인지 1인지 판별
{
	if((*pin & mask) != 0) return 1;
 2d6:	fc 01       	movw	r30, r24
 2d8:	80 81       	ld	r24, Z
 2da:	68 23       	and	r22, r24
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <TestBit+0xe>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret
	return 0;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
}
 2e8:	08 95       	ret

000002ea <StandBy>:


void StandBy(){
	DDR &= ~0x10; // PG4 : 입력으로 설정
 2ea:	e4 e6       	ldi	r30, 0x64	; 100
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	8f 7e       	andi	r24, 0xEF	; 239
 2f2:	80 83       	st	Z, r24
	PORT |= 0x10; // PG4 : Pull-up
 2f4:	e5 e6       	ldi	r30, 0x65	; 101
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	80 83       	st	Z, r24

	//while((PING & (1<<SW1)) == 0); // PING0의 초기값이 1(open)임을 가정 //  전원이 켜지고 활성화 될때(pull-up (1))이 될떄까지 대기
	while(1)
	{
		if(TestBit(PING, 0x10)) break;
 2fe:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 302:	60 e1       	ldi	r22, 0x10	; 16
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	e7 df       	rcall	.-50     	; 0x2d6 <TestBit>
 308:	89 2b       	or	r24, r25
 30a:	c9 f3       	breq	.-14     	; 0x2fe <StandBy+0x14>
	}
	while(1)
	{
		if(!TestBit(PING, 0x10)) break;
 30c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 310:	60 e1       	ldi	r22, 0x10	; 16
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	e0 df       	rcall	.-64     	; 0x2d6 <TestBit>
 316:	89 2b       	or	r24, r25
 318:	c9 f7       	brne	.-14     	; 0x30c <StandBy+0x22>
	}
	
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
