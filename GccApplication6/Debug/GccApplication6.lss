
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003b0  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010c  0080010c  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad5  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b3  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000433  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025e  00000000  00000000  000021df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000243d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	22 c1       	rjmp	.+580    	; 0x24a <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	77 c0       	rjmp	.+238    	; 0x118 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ee c0       	rjmp	.+476    	; 0x21a <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	06 d1       	rcall	.+524    	; 0x2d0 <main>
  c4:	73 c1       	rjmp	.+742    	; 0x3ac <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <digit>:
#define IPORT		PORTB
unsigned char img[] = { 0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67 }; // 0123456789
char data[5];
int Mode = 0; // 0:Ready, 1:up-Count, 2:Stop, ...

int digit(int num){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	9c 01       	movw	r18, r24
	if(num > 9999) return 0;
  ce:	20 31       	cpi	r18, 0x10	; 16
  d0:	87 e2       	ldi	r24, 0x27	; 39
  d2:	38 07       	cpc	r19, r24
  d4:	e4 f4       	brge	.+56     	; 0x10e <digit+0x46>
	data[3] = num % 10; //1
  d6:	ca e0       	ldi	r28, 0x0A	; 10
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	c9 01       	movw	r24, r18
  dc:	be 01       	movw	r22, r28
  de:	3f d1       	rcall	.+638    	; 0x35e <__divmodhi4>
  e0:	e6 e1       	ldi	r30, 0x16	; 22
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	83 83       	std	Z+3, r24	; 0x03
	data[2] = (num / 10) % 10; //10
  e6:	cb 01       	movw	r24, r22
  e8:	be 01       	movw	r22, r28
  ea:	39 d1       	rcall	.+626    	; 0x35e <__divmodhi4>
  ec:	82 83       	std	Z+2, r24	; 0x02
	data[1] = (num / 100) % 10; //100
  ee:	c9 01       	movw	r24, r18
  f0:	64 e6       	ldi	r22, 0x64	; 100
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	34 d1       	rcall	.+616    	; 0x35e <__divmodhi4>
  f6:	cb 01       	movw	r24, r22
  f8:	be 01       	movw	r22, r28
  fa:	31 d1       	rcall	.+610    	; 0x35e <__divmodhi4>
  fc:	81 83       	std	Z+1, r24	; 0x01
	data[0] = num / 1000;	//1000
  fe:	c9 01       	movw	r24, r18
 100:	68 ee       	ldi	r22, 0xE8	; 232
 102:	73 e0       	ldi	r23, 0x03	; 3
 104:	2c d1       	rcall	.+600    	; 0x35e <__divmodhi4>
 106:	60 83       	st	Z, r22
 108:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <digit+0x4a>
 10e:	80 e0       	ldi	r24, 0x00	; 0
unsigned char img[] = { 0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67 }; // 0123456789
char data[5];
int Mode = 0; // 0:Ready, 1:up-Count, 2:Stop, ...

int digit(int num){
	if(num > 9999) return 0;
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	df 91       	pop	r29
	data[3] = num % 10; //1
	data[2] = (num / 10) % 10; //10
	data[1] = (num / 100) % 10; //100
	data[0] = num / 1000;	//1000
	return 1;
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <__vector_10>:
 118:	1f 92       	push	r1

int tcnt = 0, dp = 1; // dp : 점찍을 자리
int i;
ISR(TIMER2_OVF_vect) // FND refresh
{
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31

	//CPORT = 0x0F; // 모든 자리수 선택
	//IPORT = ~0xFF; // 전체 세그먼트 ON ---> [8.]
	if(++tcnt > 2){
 136:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tcnt>
 13a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <tcnt+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <tcnt+0x1>
 144:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tcnt>
 148:	03 97       	sbiw	r24, 0x03	; 3
 14a:	0c f4       	brge	.+2      	; 0x14e <__vector_10+0x36>
 14c:	57 c0       	rjmp	.+174    	; 0x1fc <__vector_10+0xe4>
		tcnt = 0;
 14e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <tcnt+0x1>
 152:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <tcnt>
		for(i = 0; i < 4; i++)
 156:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <i+0x1>
 15a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <i>
 15e:	46 c0       	rjmp	.+140    	; 0x1ec <__vector_10+0xd4>
		{
//#ifdef FND_TYPE_CATHOD
			if(i == dp)
 160:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 164:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 168:	82 17       	cp	r24, r18
 16a:	93 07       	cpc	r25, r19
 16c:	e1 f4       	brne	.+56     	; 0x1a6 <__vector_10+0x8e>
			{
				CPORT = _BV(i); // 1 << i
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	a9 01       	movw	r20, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <__vector_10+0x62>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	8a 95       	dec	r24
 17c:	e2 f7       	brpl	.-8      	; 0x176 <__vector_10+0x5e>
 17e:	4b bb       	out	0x1b, r20	; 27
				IPORT = ~(img[data[i]] | 0x80);
 180:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <i>
 184:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <i+0x1>
 188:	ea 5e       	subi	r30, 0xEA	; 234
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	e0 81       	ld	r30, Z
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ee 5f       	subi	r30, 0xFE	; 254
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	80 81       	ld	r24, Z
 196:	80 68       	ori	r24, 0x80	; 128
 198:	80 95       	com	r24
 19a:	88 bb       	out	0x18, r24	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	9e e4       	ldi	r25, 0x4E	; 78
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <__vector_10+0x88>
 1a4:	1a c0       	rjmp	.+52     	; 0x1da <__vector_10+0xc2>
				_delay_ms(5);
			}
			else
			{
				CPORT = _BV(i); // 1 << i
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	a9 01       	movw	r20, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <__vector_10+0x9a>
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <__vector_10+0x96>
 1b6:	4b bb       	out	0x1b, r20	; 27
				IPORT = ~img[data[i]];
 1b8:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <i>
 1bc:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <i+0x1>
 1c0:	ea 5e       	subi	r30, 0xEA	; 234
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	e0 81       	ld	r30, Z
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	ee 5f       	subi	r30, 0xFE	; 254
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	80 81       	ld	r24, Z
 1ce:	80 95       	com	r24
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	9e e4       	ldi	r25, 0x4E	; 78
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <__vector_10+0xbe>

	//CPORT = 0x0F; // 모든 자리수 선택
	//IPORT = ~0xFF; // 전체 세그먼트 ON ---> [8.]
	if(++tcnt > 2){
		tcnt = 0;
		for(i = 0; i < 4; i++)
 1da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i>
 1de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <i+0x1>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <i+0x1>
 1e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <i>
 1ec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i>
 1f0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <i+0x1>
 1f4:	84 30       	cpi	r24, 0x04	; 4
 1f6:	91 05       	cpc	r25, r1
 1f8:	0c f4       	brge	.+2      	; 0x1fc <__vector_10+0xe4>
 1fa:	b2 cf       	rjmp	.-156    	; 0x160 <__vector_10+0x48>
				//_delay_ms(5);
		}
			//TCNT0 =0;
	}

}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0b be       	out	0x3b, r0	; 59
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_15>:
volatile int tick = 0;
int sTick = 0;
ISR(TIMER0_COMP_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
	tick++;
 228:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tick>
 22c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tick+0x1>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tick+0x1>
 236:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tick>
	TCNT0 = 0;
 23a:	12 be       	out	0x32, r1	; 50
}
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_1>:
ISR(INT0_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
	//Mode++;
	switch(++Mode)
 258:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Mode>
 25c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Mode+0x1>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Mode+0x1>
 266:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Mode>
 26a:	99 23       	and	r25, r25
 26c:	a4 f0       	brlt	.+40     	; 0x296 <__vector_1+0x4c>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	91 05       	cpc	r25, r1
 272:	1c f0       	brlt	.+6      	; 0x27a <__vector_1+0x30>
 274:	02 97       	sbiw	r24, 0x02	; 2
 276:	31 f0       	breq	.+12     	; 0x284 <__vector_1+0x3a>
 278:	0e c0       	rjmp	.+28     	; 0x296 <__vector_1+0x4c>
	{
		case 0:
		case 1:			// Start up-count
			tick = 0;
 27a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <tick+0x1>
 27e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tick>
			break;
 282:	15 c0       	rjmp	.+42     	; 0x2ae <__vector_1+0x64>
		case 2:			// Stop
			sTick = tick;
 284:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tick>
 288:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tick+0x1>
 28c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 290:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
			break;
 294:	0c c0       	rjmp	.+24     	; 0x2ae <__vector_1+0x64>
		default:		// Mode > 2
			tick = sTick = 0;
 296:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 29a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 29e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <tick+0x1>
 2a2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tick>
			Mode = 0;
 2a6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <Mode+0x1>
 2aa:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Mode>
	}
	if(Mode > 2) Mode = 0;
 2ae:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Mode>
 2b2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Mode+0x1>
 2b6:	03 97       	sbiw	r24, 0x03	; 3
 2b8:	24 f0       	brlt	.+8      	; 0x2c2 <__vector_1+0x78>
 2ba:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <Mode+0x1>
 2be:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Mode>
}
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <main>:
int main(void)
{
	// Timer0: 100ms stop-watch, timer2: FND refresh

	//TIMSK |= 0x40; // 0b 01xx xxxx OCIE0
	DDRG &= ~0x10; // PG4 : 입력으로 설정
 2d0:	e4 e6       	ldi	r30, 0x64	; 100
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	8f 7e       	andi	r24, 0xEF	; 239
 2d8:	80 83       	st	Z, r24
	PORTG |= 0x10; // PG4 : Pull-up
 2da:	e5 e6       	ldi	r30, 0x65	; 101
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	80 61       	ori	r24, 0x10	; 16
 2e2:	80 83       	st	Z, r24
	
	//TIMSK |= 0x40; // //0b 01xx xxxx TOIE2
	TIMSK |= 0x02; // TOIE0
 2e4:	87 b7       	in	r24, 0x37	; 55
 2e6:	82 60       	ori	r24, 0x02	; 2
 2e8:	87 bf       	out	0x37, r24	; 55
	TIMSK |= 0x40; // TOIE2
 2ea:	87 b7       	in	r24, 0x37	; 55
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x07; // 분주비 110:256, (1/16M) * 256 * 256 =0.004xxx (~=4ms)
 2f0:	83 b7       	in	r24, 0x33	; 51
 2f2:	87 60       	ori	r24, 0x07	; 7
 2f4:	83 bf       	out	0x33, r24	; 51
	TCCR2 |= 0x05; // 분주비 110:256, 100:256 : (1/16M) * 256 * 1024 = 0.016(sec)
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	85 60       	ori	r24, 0x05	; 5
 2fa:	85 bd       	out	0x25, r24	; 37
	OCR0 = 84;// (1/16M) * 84 * 1024 = 0.005376 == 0.01 (~=10ms)
 2fc:	84 e5       	ldi	r24, 0x54	; 84
 2fe:	81 bf       	out	0x31, r24	; 49

	//OCR0 = 224; // (1/16M) * 224 * 1024 * 7 = 0.1003 ( ~= 100ms)
	
	// Ext-Intr : Mode Change 0:Ready, 1:upCount, 2:Stop, ...
	EIMSK |= 0x01; // D0 pin, EINT0,
 300:	89 b7       	in	r24, 0x39	; 57
 302:	81 60       	ori	r24, 0x01	; 1
 304:	89 bf       	out	0x39, r24	; 57
	EICRA |= 0x03;
 306:	ea e6       	ldi	r30, 0x6A	; 106
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	83 60       	ori	r24, 0x03	; 3
 30e:	80 83       	st	Z, r24
	//EICRA &= ~0x03;

	CDDR |= 0x0F; // 하위 4bit를 출력으로 설정
 310:	8a b3       	in	r24, 0x1a	; 26
 312:	8f 60       	ori	r24, 0x0F	; 15
 314:	8a bb       	out	0x1a, r24	; 26
	IDDR |= 0xFF; // 8bit 전체를 출력으로 설정
 316:	87 b3       	in	r24, 0x17	; 23
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */
    
	//Mode = 0;
	sei();
 31c:	78 94       	sei
	//CPORT = 0x0F; // 모든 자리수 선택
	//IPORT = ~0xFF; // 전체 세그먼트 ON ---> [8.]
	int num = 0000;
	digit(num);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	d2 de       	rcall	.-604    	; 0xc8 <digit>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 324:	88 ee       	ldi	r24, 0xE8	; 232
 326:	93 e0       	ldi	r25, 0x03	; 3
 328:	05 c0       	rjmp	.+10     	; 0x334 <main+0x64>
 32a:	e0 e9       	ldi	r30, 0x90	; 144
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0x5e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 332:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	c9 f7       	brne	.-14     	; 0x32a <main+0x5a>
	//StandBy(); 
	_delay_ms(100);
	while (1) 
    {
		switch(Mode)
 338:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Mode>
 33c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Mode+0x1>
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	19 f0       	breq	.+6      	; 0x34a <main+0x7a>
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	29 f0       	breq	.+10     	; 0x352 <main+0x82>
 348:	f7 cf       	rjmp	.-18     	; 0x338 <main+0x68>
		{
			case 0: // Ready
				digit(0);
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	bc de       	rcall	.-648    	; 0xc8 <digit>
				break;
 350:	f3 cf       	rjmp	.-26     	; 0x338 <main+0x68>
			case 1: // Up-Count
				digit(tick);
 352:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tick>
 356:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tick+0x1>
 35a:	b6 de       	rcall	.-660    	; 0xc8 <digit>
				break;
 35c:	ed cf       	rjmp	.-38     	; 0x338 <main+0x68>

0000035e <__divmodhi4>:
 35e:	97 fb       	bst	r25, 7
 360:	07 2e       	mov	r0, r23
 362:	16 f4       	brtc	.+4      	; 0x368 <__divmodhi4+0xa>
 364:	00 94       	com	r0
 366:	06 d0       	rcall	.+12     	; 0x374 <__divmodhi4_neg1>
 368:	77 fd       	sbrc	r23, 7
 36a:	08 d0       	rcall	.+16     	; 0x37c <__divmodhi4_neg2>
 36c:	0b d0       	rcall	.+22     	; 0x384 <__udivmodhi4>
 36e:	07 fc       	sbrc	r0, 7
 370:	05 d0       	rcall	.+10     	; 0x37c <__divmodhi4_neg2>
 372:	3e f4       	brtc	.+14     	; 0x382 <__divmodhi4_exit>

00000374 <__divmodhi4_neg1>:
 374:	90 95       	com	r25
 376:	81 95       	neg	r24
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	08 95       	ret

0000037c <__divmodhi4_neg2>:
 37c:	70 95       	com	r23
 37e:	61 95       	neg	r22
 380:	7f 4f       	sbci	r23, 0xFF	; 255

00000382 <__divmodhi4_exit>:
 382:	08 95       	ret

00000384 <__udivmodhi4>:
 384:	aa 1b       	sub	r26, r26
 386:	bb 1b       	sub	r27, r27
 388:	51 e1       	ldi	r21, 0x11	; 17
 38a:	07 c0       	rjmp	.+14     	; 0x39a <__udivmodhi4_ep>

0000038c <__udivmodhi4_loop>:
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	a6 17       	cp	r26, r22
 392:	b7 07       	cpc	r27, r23
 394:	10 f0       	brcs	.+4      	; 0x39a <__udivmodhi4_ep>
 396:	a6 1b       	sub	r26, r22
 398:	b7 0b       	sbc	r27, r23

0000039a <__udivmodhi4_ep>:
 39a:	88 1f       	adc	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	5a 95       	dec	r21
 3a0:	a9 f7       	brne	.-22     	; 0x38c <__udivmodhi4_loop>
 3a2:	80 95       	com	r24
 3a4:	90 95       	com	r25
 3a6:	bc 01       	movw	r22, r24
 3a8:	cd 01       	movw	r24, r26
 3aa:	08 95       	ret

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
